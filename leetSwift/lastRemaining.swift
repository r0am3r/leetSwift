// 0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。
// 例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。


// 示例 1：
// 输入: n = 5, m = 3
// 输出: 3

// 示例 2：
// 输入: n = 10, m = 17
// 输出: 2

// 限制：
// 1 <= n <= 10^5
// 1 <= m <= 10^6

// 原序列中元素值和位置编号一致的，所以只要推出原序列中最后一个元素的位置即为元素值
// 对于长度为 n 的序列，假设最后剩余的元素为 x，如何推导出其位置编号？
// 当该序列删除一个元素后，长度变为 n - 1，假设此时 x 的在当前序列的位置编号为 y，
// 当前序列的首元素在原序列中为被删除元素（位置编号为 m）的后一个元素，也就是说当前序列所有元素的位置编号与原序例的编号偏差为 m
// 所以 x 在原序列中的位置编号为 y + m，此位置可能超过序列长度，由于是个环形，所以求余便可得到实际位置
// 可以推出 x 在删减前后两个序列中的位置编号关系为 f(n, m) = (f(n-1, m) + m) % n
// 当删减到最后一个元素是，其位置编号一定为 0，即f(1, m) = 0

class Solution {
    func lastRemaining(_ n: Int, _ m: Int) -> Int {
        var lastStanding = 0
        for i in 2 ... n {
            lastStanding = (lastStanding + m) % i
        }
        return lastStanding
    }
}
