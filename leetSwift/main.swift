//
//  main.swift
//  leetSwift
//
//  Created by Wong Feng on 22/3/2020.
//  Copyright Â© 2020 Wong Feng. All rights reserved.
//

import Foundation

var arr = [7889,25359,23384,19645,10733,22900,4188,234,18946,8719,4741,5053,14164,1240,14279,8787,602,4645,19108,2681,2820,16375,18378,18967,7211,23528,4342,17771,18926,7928,17376,5510,13854,5356,1850,3473,6837,13907,848,25610,25844,22751,22252,25181,6391,19401,11708,6532,8825,12670,14355,12943,673,20222,10177,6082,26101,2316,24052,16195,22270,17102,12603,5572,22055,9293,12994,16141,15344,25495,10078,1862,14090,21397,20011,25690,7153,4049,22801,698,26309,5209,12727,13881,1441,11722,20428,7219,1393,25705,5091,18147,26393,8934,14228,12202,15239,23288,1782,13724,1753,4123,3778,25256,1176,14977,22831,12862,14122,19309,16022,7275,7430,26052,9287,15870,8840,4784,18508,8696,2129,13726,13517,9071,5074,6395,18604,5388,11745,9059,6904,12909,23045,4465,7851,23788,1620,24579,22044,17403,16325,8392,1063,10788,2696,25076,8784,11296,21612,6237,15503,18376,1669,451,12737,15071,24137,14156,26372,26566,11038,7789,2391,19313,14172,7580,25745,17974,10625,7090,2370,6666,2779,17789,1632,10020,5655,12669,13265,5209,3250,24606,14404,21888,16214,15434,26291,25124,24450,22617,25369,12264,21924,24066,5631,24088,19571,20292,8644,25186,3091,15649,26096,18454,21750,18056,1259,8660,16319,12131,8749,17642,12534,5151,11439,23461,7797,5172,24409,21679,20999,11079,634,1492,19988,10680,2993,6154,8857,7675,26272,7083,4648,23087,5737,23838,25572,13201,6924,19256,25249,11423,3041,17508,2415,11095,26114,25546,23641,9913,636,15203,14206,5550,10303,17665,46,24153,25035,19566,12578,22235,6277,10300,1787,15690,6925,3004,22888,1196]

//print(minIncrementForUnique().minIncrementForUnique(arr))
//print(twoSum().twoSum(arr, 26805))
//print(masseuse().masseuse([2,1,4,5,3,1,1,3]))
//print(surfaceArea().surfaceArea([[1,0],[0,2]]))
//print(sortArray().sortArray([-2,3,-5]))
//print(trap().trap([0,1,0,2,1,0,1,3,2,1,2,1]))
//_ = Permute().permute([1,2,3])
//print(lengthOfLongestSubstring().lengthOfLongestSubstring("tmmzuxt"))
Jump().jump([1,23,4,0,3])
_ = BST().isValidBST(nil)
_ = MaximalSquare().maximalSquare([[]])
